<?php if ( ! defined('BASEPATH')) exit('No direct script access allowed');class Scanner extends MY_Controller{    private $user;    function __construct()    {        parent::__construct();        // To load the CI benchmark and memory usage profiler - set 1==1.        if (1 == 2) {            $sections = array(                'benchmarks' => TRUE, 'memory_usage' => TRUE,                'config' => FALSE, 'controller_info' => FALSE, 'get' => FALSE, 'post' => FALSE, 'queries' => FALSE,                'uri_string' => FALSE, 'http_headers' => FALSE, 'session_data' => FALSE            );            $this->output->set_profiler_sections($sections);            $this->output->enable_profiler(TRUE);        }        // Load required CI libraries and helpers.        $this->load->database();        // IMPORTANT! This global must be defined BEFORE the flexi auth library is loaded!        // It is used as a global that is accessible via both models and both libraries, without it, flexi auth will not work.        $this->auth = new stdClass;        // Load 'standard' flexi auth library by default.        $this->load->library('flexi_auth');        if (!$this->flexi_auth->is_logged_in_via_password() || !$this->flexi_auth->is_admin()) {            // Set a custom error message.            $this->flexi_auth->set_error_message('You must login as an admin to access this area.', TRUE);            $this->session->set_flashdata('message', $this->flexi_auth->get_messages());            redirect('auth');        }        // Define a global variable to store data that is then used by the end view page.        $this->data = null;        $this->user = $this->far_users->get_user('uacc_id', $this->flexi_auth->get_user_id());        $this->global_pass_to_view();    }    public function global_pass_to_view()    {        $this->data['logged_in'] = $this->user;        if ($this->flexi_auth->is_admin()) {            $this->data['logged_in']['is_admin'] = true;        }    }    function my_qrcode(){        $this->far_auth->allowed_group('6', $this->user['ugrp_id']);        $this->load->view('scanner/user/my_qrcode', $this->data);    }    function my_scanner(){        $this->far_auth->allowed_group('6', $this->user['ugrp_id']);        $this->load->view('scanner/user/my_scanner', $this->data);    }    function ajax_process_to_server(){        $this->far_auth->allowed_group('6', $this->user['ugrp_id']);        $this->load->library('far_fdb');        $postdata = $this->input->post('postdata');        $error = array();        $output = array();        $qr_type = "unknown";        $page_to_show = "unknown";        $virtual_account_number = "";        $event_code = "";        if($this->isValidURL($postdata['qrcontent'])){            $qr_type = "url";        }elseif(substr( $postdata['qrcontent'], 0, 9 ) === "weblogin_"){            $qr_type = "weblogin";            $x = explode("_", $postdata['qrcontent']);            $browser_unique_id = $x[1];            //update firebase            $this->far_fdb->set('desktop_login/opening/'.$browser_unique_id, array('status' => 'scanned', 'uacc_id' => ($this->user['uacc_id']+845157845)));        }        if($postdata['event_id']){            $event_detail = $this->be_event->get_event_detail($postdata['event_id']);        }        if($qr_type == 'url'){            $url_parse = parse_url($postdata['qrcontent']);            if($url_parse['host'] == 'app.bemobile.biz'){                $url_path = array_values(array_filter(explode("/", $url_parse['path'])));                //scanned URL Profile Card                if($url_path[0] = 'me' && preg_match('/^[0-9]+$/', $url_path[1])){                    $page_to_show = "profile_card";                    $virtual_account_number = $url_path[1];                    $userId = $this->be_users->get_userId_from_virtual_account_number($virtual_account_number);                }elseif($url_path[0] = 'event' && strlen($url_path[1]) > 3){                    $page_to_show = "event_checkin";                    $event_code = $url_path[1];                }else{                    $page_to_show = "unknown_1";                }            }else{                $page_to_show = "outside_website";            }        }elseif($qr_type == 'weblogin'){            $page_to_show = "weblogin";        }        if($page_to_show == 'profile_card' && (is_array($event_detail) && count($event_detail)) > 0){            $page_to_show = 'admin_checkin_event';            //$user_detail = $this->be_users->get_user('userId', $userId);        }elseif($page_to_show == 'weblogin'){        }        if(count($error) == 0){            if($page_to_show == 'admin_checkin_event'){                $output['event_detail'] = $event_detail;                $output['user_detail'] = $user_detail;            }            $output['content'] = $postdata['qrcontent'];            $output['host'] = $url_parse['host'];            $output['userId'] = $userId;            $output['event_code'] = $event_code;            $output['page_to_show'] = $page_to_show;            $output['url_path'] = $url_path;            $output['url_parse'] = $url_parse;            $output['qr_type'] = $qr_type;            $output['virtual_account_number'] = $virtual_account_number;            $output['status'] = 'success';        }else{            $output['message_single'] = current($error);            $output['errors'] = $error;            $output['status'] = 'error';        }        echo json_encode($output);    }    function isValidURL($url){        $regex = "((https?|ftp)\:\/\/)?"; // SCHEME        $regex .= "([a-z0-9+!*(),;?&=\$_.-]+(\:[a-z0-9+!*(),;?&=\$_.-]+)?@)?"; // User and Pass        $regex .= "([a-z0-9-.]*)\.([a-z]{2,3})"; // Host or IP        $regex .= "(\:[0-9]{2,5})?"; // Port        $regex .= "(\/([a-z0-9+\$_-]\.?)+)*\/?"; // Path        $regex .= "(\?[a-z+&\$_.-][a-z0-9;:@&%=+\/\$_.-]*)?"; // GET Query        $regex .= "(#[a-z_.-][a-z0-9+\$_.-]*)?"; // Anchor        if(preg_match("/^$regex$/i", $url)) // `i` flag for case-insensitive        {            return true;        }    }}