<?php if ( ! defined('BASEPATH')) exit('No direct script access allowed');//include APPPATH . 'third_party/myic.class.php';class Profile extends MY_Controller{    private $user;    function __construct()    {        parent::__construct();        // To load the CI benchmark and memory usage profiler - set 1==1.        if (1 == 2) {            $sections = array(                'benchmarks' => TRUE, 'memory_usage' => TRUE,                'config' => FALSE, 'controller_info' => FALSE, 'get' => FALSE, 'post' => FALSE, 'queries' => FALSE,                'uri_string' => FALSE, 'http_headers' => FALSE, 'session_data' => FALSE            );            $this->output->set_profiler_sections($sections);            $this->output->enable_profiler(TRUE);        }        // Load required CI libraries and helpers.        $this->load->database();        // IMPORTANT! This global must be defined BEFORE the flexi auth library is loaded!        // It is used as a global that is accessible via both models and both libraries, without it, flexi auth will not work.        $this->auth = new stdClass;        // Load 'standard' flexi auth library by default.        $this->load->library('flexi_auth');        if (!$this->flexi_auth->is_logged_in_via_password() || !$this->flexi_auth->is_admin()) {            // Set a custom error message.            $this->flexi_auth->set_error_message('You must login as an admin to access this area.', TRUE);            $this->session->set_flashdata('message', $this->flexi_auth->get_messages());            redirect('auth');        }        // Define a global variable to store data that is then used by the end view page.        $this->data = null;        $this->user = $this->far_users->get_user('uacc_id', $this->flexi_auth->get_user_id());        $this->global_pass_to_view();    }    public function global_pass_to_view()    {        $this->data['logged_in'] = $this->user;        if ($this->flexi_auth->is_admin()) {            $this->data['logged_in']['is_admin'] = true;        }    }    function consent(){        $this->far_auth->allowed_group('6', $this->user['ugrp_id']);        $this->load->view('profile/user/consent', $this->data);    }    function sign_consent(){        $this->far_auth->allowed_group('6', $this->user['ugrp_id']);        $this->load->view('profile/user/sign_consent', $this->data);    }    function download_consent_letter_pdf(){        $this->far_auth->allowed_group('6', $this->user['ugrp_id']);        $this->load->library('far_mpdf');        $this->far_mpdf->generate_consent_letter_pdf($this->user['uacc_id'], "D");        //$this->load->view('profile/user/sign_consent', $this->data);    }    function view_consent_letter_pdf(){        $this->far_auth->allowed_group('3,6', $this->user['ugrp_id']);        $uacc_id = $this->input->get('uacc_id') ? $this->input->get('uacc_id') : $this->user['uacc_id'];        $this->load->library('far_mpdf');        $this->far_mpdf->generate_consent_letter_pdf($uacc_id, "I");        //$this->load->view('profile/user/sign_consent', $this->data);    }    function force_download_verified_consent(){        $this->far_auth->allowed_group('6', $this->user['ugrp_id']);        $this->load->library('far_mpdf');        $this->far_mpdf->generate_consent_letter_pdf($this->user['uacc_id'], "D");    }    function force_download_pdf(){        // Define file name and path        $fileName = 'consent_template.pdf';        $filePath = FCPATH.'assets/myloan/'.$fileName;        // Define headers        header("Cache-Control: public");        header("Content-Description: File Transfer");        header("Content-Disposition: attachment; filename=$fileName");        header("Content-Type: application/zip");        header("Content-Transfer-Encoding: binary");        // Read the file        readfile($filePath);        exit;    }    function view_profile(){        $this->far_auth->allowed_group('6', $this->user['ugrp_id']);        $this->load->view('profile/user/view_profile', $this->data);    }    function update_profile(){        $this->far_auth->allowed_group('6', $this->user['ugrp_id']);        $this->load->view('profile/user/update_profile', $this->data);    }    function user_mykad_upload(){        $this->far_auth->allowed_group('6', $this->user['ugrp_id']);        if($this->user['mykad_front_verification_status'] == 'pending_admin_verification' || $this->user['mykad_back_verification_status'] == 'pending_admin_verification'){            $this->load->view('profile/user/user_mykad_pending_verification', $this->data);        }elseif($this->user['mykad_verification_status'] == 'pending_user_upload'){            //$this->load->view('profile/user/user_mykad_upload2', $this->data);            $this->load->view('profile/user/mykad_dashboard', $this->data);        }    }    function ajax_modal_address_dashboard(){        $this->far_auth->allowed_group('6', $this->user['ugrp_id']);        $this->load->view('profile/user/ajax_modal_address_dashboard', $this->data);    }    function user_ajax_update_profile(){        $this->far_auth->allowed_group('6', $this->user['ugrp_id']);         $postdata = $this->input->post('postdata');        $error = array();        $output = array();        if(strlen($postdata['fullname']) < 3){            $error['fullname'] = "Nickname must be greater than 3 characters";        }        if(strlen($postdata['email']) < 3){            $error['email'] = "Email must be greater than 3 characters";        }        if(strlen($postdata['bank_account_name']) < 3){            $error['bank_account_name'] = "Account Name must be greater than 3 characters";        }        if(strlen($postdata['bank_account_number']) < 3){            $error['bank_account_number'] = "Account Number must be greater than 3 characters";        }        if(count($error) == 0){            $this->far_users->update_profile('uacc_id', $this->user['uacc_id'], 'fullname', strtoupper($postdata['fullname']));            $this->far_users->update_profile('uacc_id', $this->user['uacc_id'], 'nric_number', strtoupper($postdata['nric_number']));            $this->far_users->update_profile('uacc_id', $this->user['uacc_id'], 'email', strtolower($postdata['email']));            $this->far_users->update_user('uacc_id', $this->user['uacc_id'], 'bank_name', strtoupper($postdata['bank_name']));            $this->far_users->update_user('uacc_id', $this->user['uacc_id'], 'bank_account_name', strtoupper($postdata['bank_account_name']));            $this->far_users->update_user('uacc_id', $this->user['uacc_id'], 'bank_account_number', strtoupper($postdata['bank_account_number']));            $output['status'] = 'success';            $output['redirect_url'] = base_url().'profile/view_profile/';        }else{            $output['message_single'] = current($error);            $output['errors'] = $error;            $output['status'] = 'error';        }        echo json_encode($output);    }    function user_upload_profile_photo(){        $this->far_auth->allowed_group('6', $this->user['ugrp_id']);        $error = array();        $output = array();        // Decode base64 data        list($type, $data) = explode(';', $_POST['file']);        list(, $data) = explode(',', $data);        $file_data = base64_decode($data);        // Get file mime type        $finfo = finfo_open();        $file_mime_type = finfo_buffer($finfo, $file_data, FILEINFO_MIME_TYPE);        // File extension from mime type        if($file_mime_type == 'image/jpeg' || $file_mime_type == 'image/jpg'){            $file_type = 'jpeg';        }else if($file_mime_type == 'image/png'){            $file_type = 'png';        }else if($file_mime_type == 'image/gif'){            $file_type = 'gif';        }else{            $file_type = 'other';        }        // Validate type of file        if(!in_array($file_type, [ 'jpeg', 'png', 'gif' ])) {            $error['filetype'] = 'Error : Only JPEG, PNG & GIF allowed';        }        if(count($error) == 0){            // Set a unique name to the file and save            $file_name = $this->user['uacc_id']."_".uniqid();            $file_name_with_extension = $file_name . '.' . $file_type;            $file_path = FCPATH.'assets/uploads/profile_pic/'.$file_name_with_extension;            file_put_contents($file_path, $file_data);            $this->load->library('image_lib');            //generate thumbnail            $config_thumb['image_library'] = 'gd2';            $config_thumb['source_image'] = $file_path;            $config_thumb['create_thumb'] = TRUE;            $config_thumb['maintain_ratio'] = TRUE;            $config_thumb['width']         = 300;            $config_thumb['thumb_marker'] = "";            $config_thumb['quality'] = "100%";            $config_thumb['new_image'] = FCPATH.'assets/uploads/profile_pic/thumb/';            list($width, $height) = getimagesize($config_thumb['source_image']);            if ($width >= $height){                $config_thumb['width'] = 300;            }else{                $config_thumb['height'] = 500;            }            $config_thumb['master_dim'] = 'auto';            $this->image_lib->clear();            $this->image_lib->initialize($config_thumb);            $profile_picture_url = base_url().'assets/uploads/profile_pic/'.$file_name.".".$file_type;            $this->far_users->update_profile('uacc_id', $this->user['uacc_id'], 'profile_picture_url', $profile_picture_url);            $output['status'] = 'success';        }else{            $output['message_single'] = current($error);            $output['errors'] = $error;            $output['status'] = 'error';        }        echo json_encode($output);    }    function user_upload_signature(){        $this->far_auth->allowed_group('6', $this->user['ugrp_id']);        $postdata = $this->input->post('postdata');        $error = array();        $output = array();        if(count($_FILES['upload']['name']) != 1){            $error['upload'] = "Please upload MyKad photos";        }        if(count($error) == 0){            $output_upload = $this->_upload_and_save_signature($postdata['uacc_id']);            $output['status'] = 'success';        }else{            $output['message_single'] = current($error);            $output['errors'] = $error;            $output['status'] = 'error';        }        echo json_encode($output);    }    public function _upload_and_save_signature($uacc_id)    {        $output = array();        $this->load->library('image_lib');        $uploaded_data = array();        foreach ($_FILES['upload']['name'] as $a => $b) {            if (!empty($_FILES['upload']['name'][$a]) && $_FILES['upload']['name'][$a] == 'blob') {                $filename_new = $uacc_id.'_'.$a.'_'.time().mt_rand(111111, 999999).uniqid().'.png';                $full_path = FCPATH.'assets/uploads/signature/'.$filename_new;                move_uploaded_file(                    $_FILES['upload']['tmp_name'][$a],                    $full_path                );                $uploaded_filename = base_url() . 'assets/uploads/signature/' . $filename_new;                $this->far_users->update_profile('uacc_id', $uacc_id, 'signature_url', $uploaded_filename);                $this->far_users->update_profile('uacc_id', $uacc_id, 'signature_create_dttm', date("Y-m-d H:i:s"));                $this->far_users->update_profile('uacc_id', $uacc_id, 'signature_verification_status', 'verified');            }            $uploaded_data[] = array(                'attachment_fullurl' => $uploaded_filename,                'attachment_thumbnail_fullurl' => $attachment_thumbnail_fullurl,                $a => 'success'            );            //$uploaded_data[$a] = "success";        }        $output['status'] = "success";        $output['data'] = $uploaded_data;        return $output;    }    function user_upload_mykad_front_back(){        $this->far_auth->allowed_group('6', $this->user['ugrp_id']);        $postdata = $this->input->post('postdata');        $error = array();        $output = array();        //echo count($_FILES['upload']['name']); exit();        if(strlen($postdata['fullname_as_per_mykad']) < 3){            $error['fullname_as_per_mykad'] = "Fullname must be greater than 3 characters";        }        if(strlen($postdata['nric_number']) < 10){            $error['nric_number'] = "MyKad Number must be 12 digits";        }        if(count($_FILES['upload']['name']) != 2){            $error['upload'] = "Please upload MyKad photos";        }        if(count($error) == 0){            $output_upload = $this->_upload_and_save_nric_front_and_back();            $this->far_users->update_profile('uacc_id', $this->user['uacc_id'], 'fullname_as_per_mykad', strtoupper($postdata['fullname_as_per_mykad']));            $this->far_users->update_profile('uacc_id', $this->user['uacc_id'], 'nric_number', $postdata['nric_number']);            $output['status'] = 'success';        }else{            $output['message_single'] = current($error);            $output['errors'] = $error;            $output['status'] = 'error';        }        echo json_encode($output);    }    public function _upload_and_save_nric_front_and_back()    {        $output = array();        $this->load->library('image_lib');        $data = [];        $count = count($_FILES['upload']['name']);        $upload_array = $_FILES['upload']['name'];        $uploaded_data = array();        foreach ($_FILES['upload']['name'] as $a => $b) {            $config_thumb = array();            if (!empty($_FILES['upload']['name'][$a]) && $_FILES['upload']['name'][$a] == 'blob') {                $extension_without_dot = 'png';                if($_FILES['upload']['type'][$a] == 'image/png'){                    $extension_without_dot = 'png';                }elseif($_FILES['upload']['type'][$a] == 'image/jpeg'){                    $extension_without_dot = 'jpeg';                }                $filename_new = $this->user['uacc_id'].'_'.$a.'_'.time().mt_rand(111111, 999999).uniqid().'.'.$extension_without_dot;                $full_path = FCPATH.'assets/uploads/registrar_profile/nric/'.$filename_new;                move_uploaded_file(                    $_FILES['upload']['tmp_name'][$a],                    $full_path                );                $uploaded_filename = base_url() . 'assets/uploads/registrar_profile/nric/' . $filename_new;                $extradata = array(                    'uacc_id' => $this->user['uacc_id'],                    'attachment_type' => $_FILES['upload']['type'][$a],                    'attachment_size' => $_FILES['upload']['size'][$a],                    'attachment_category' => $a,                    'attachment_fullpath' => $full_path,                    'attachment_fullurl' => $uploaded_filename,                    'uploader_uacc_id' => $this->user['uacc_id'],                    'verification_status' => 'pending_admin_verification'                );                $mykad_attachment_id = $this->far_users->create_mykad_attachment($extradata);                if ($a == 'nric_front') {                    $this->far_users->update_profile('uacc_id', $this->user['uacc_id'], 'nric_front_url', $uploaded_filename);                    $this->far_users->update_profile('uacc_id', $this->user['uacc_id'], 'nric_front_mykad_attachment_id', $mykad_attachment_id);                } elseif ($a == 'nric_back') {                    $this->far_users->update_profile('uacc_id', $this->user['uacc_id'], 'nric_back_url', $uploaded_filename);                    $this->far_users->update_profile('uacc_id', $this->user['uacc_id'], 'nric_back_mykad_attachment_id', $mykad_attachment_id);                }                //set active                $update_active_data = array(                    'status' => 'inactive',                );                $this->db->where('uacc_id', $this->user['uacc_id']);                $this->db->where('attachment_category', $a);                $this->db->update('mykad_attachment', $update_active_data);                $this->far_users->update_mykad_attachment('mykad_attachment_id', $mykad_attachment_id, 'status', 'active');                //generate thumbnail                $config_thumb['image_library'] = 'gd2';                $config_thumb['source_image'] = $full_path;                $config_thumb['create_thumb'] = TRUE;                $config_thumb['maintain_ratio'] = TRUE;                $config_thumb['thumb_marker'] = "";                $config_thumb['width'] = 300;                $config_thumb['height'] = 200;                $config_thumb['quality'] = "100%";                $config_thumb['new_image'] = FCPATH.'assets/uploads/registrar_profile/nric/thumb/';                list($width, $height) = getimagesize($config_thumb['source_image']);                if ($width >= $height) {                    $config_thumb['width'] = 1024;                } else {                    $config_thumb['height'] = 1024;                }                $config_thumb['master_dim'] = 'auto';                $this->image_lib->clear();                $this->image_lib->initialize($config_thumb);                $result_image_resize = $this->image_lib->resize();                if ($result_image_resize) {                    @$imgdata = exif_read_data($config_thumb['source_image'], 'IFD0');                    //auto rotate if needed                    if ($imgdata && isset($imgdata['Orientation'])) {                        $ort = $imgdata['Orientation'];                        if ($ort == 3 || $ort == 4) {                            $config_rotate['rotation_angle'] = '180';                        } elseif ($ort == 6 || $ort == 5) {                            $config_rotate['rotation_angle'] = '270';                        } elseif ($ort == 8 || $ort == 7) {                            $config_rotate['rotation_angle'] = '90';                        }                        if (in_array($ort, array('3', '4', '5', '6', '7', '8'))) {                            $this->image_lib->initialize($config_rotate);                            $this->image_lib->rotate();                        }                    }                    $attachment_thumbnail_fullurl = base_url() . 'assets/uploads/registrar_profile/nric/thumb/' . $filename_new;                    $this->far_users->update_mykad_attachment('mykad_attachment_id', $mykad_attachment_id, 'attachment_thumbnail_fullurl', $attachment_thumbnail_fullurl);                }            }            $uploaded_data[] = array(                'attachment_fullurl' => $uploaded_filename,                'attachment_thumbnail_fullurl' => $attachment_thumbnail_fullurl,                $a => 'success'            );            //$uploaded_data[$a] = "success";        }        $output['status'] = "success";        $output['data'] = $uploaded_data;        return $output;    }    function user_verify_profile_issue_upload_nric(){        $upload_result = $this->_upload_and_save_nric_profile();        header('Content-Type: application/json; charset=utf-8');        echo json_encode($upload_result);    }    public function _upload_and_save_nric_profile()    {        $output = array();        $this->load->library('upload');        $this->load->library('image_lib');        $data = [];        $count = count($_FILES['upload']['name']);        $upload_array = $_FILES['upload']['name'];        foreach ($upload_array as $a => $b) {            $config = array();            $config_thumb = array();            if (!empty($_FILES['upload']['name'][$a])) {                $_FILES['file']['name'] = $_FILES['upload']['name'][$a];                $_FILES['file']['type'] = $_FILES['upload']['type'][$a];                $_FILES['file']['tmp_name'] = $_FILES['upload']['tmp_name'][$a];                $_FILES['file']['error'] = $_FILES['upload']['error'][$a];                $_FILES['file']['size'] = $_FILES['upload']['size'][$a];                $config['upload_path'] = FCPATH . 'assets/uploads/registrar_profile/nric/';                $config['allowed_types'] = 'jpg|jpeg|png|gif';                $config['max_size'] = '20000';                if ($a == 'nric_front') {                    $config['file_name'] = $this->user['be_userId'] . "_nric_front_" . time() . mt_rand(111111, 999999);                } elseif ($a == 'nric_back') {                    $config['file_name'] = $this->user['be_userId'] . "_nric_back_" . time() . mt_rand(111111, 999999);                } elseif ($a == 'nric_selfie') {                    $config['file_name'] = $this->user['be_userId'] . "_nric_selfie_" . time() . mt_rand(111111, 999999);                }                //echo "<pre>"; print_r($config); echo "</pre>";                $this->upload->initialize($config);                if ($this->upload->do_upload('file')) {                    $uploaded_data = $this->upload->data();                    $filename = $uploaded_data['file_name'];                    $data['uploaded_data'][] = $uploaded_data;                    $uploaded_filename = base_url() . 'assets/uploads/registrar_profile/nric/' . $uploaded_data['file_name'];                    if ($a == 'nric_front') {                        $this->far_users->update_profile('uacc_id', $this->user['uacc_id'], 'nric_front_url', $uploaded_filename);                    } elseif ($a == 'nric_back') {                        $this->far_users->update_profile('uacc_id', $this->user['uacc_id'], 'nric_back_url', $uploaded_filename);                    }                    $extradata = array(                        'registrar_profile_id' => $registrar_profile_id,                        'attachment_type' => $uploaded_data['file_type'],                        'attachment_category' => $a,                        'attachment_fullpath' => $uploaded_data['full_path'],                        'attachment_fullurl' => $uploaded_filename,                        'uploader_uacc_id' => $this->user['uacc_id']                    );                    $mykad_attachment_id = $this->far_users->create_mykad_attachment($extradata);                    //set active                    $this->far_users->update_mykad_attachment('mykad_attachment_id', $mykad_attachment_id, 'status', 'active');                    //generate thumbnail                    $config_thumb['image_library'] = 'gd2';                    $config_thumb['source_image'] = $config['upload_path'] . $config['file_name'] . $uploaded_data['file_ext'];                    $config_thumb['create_thumb'] = TRUE;                    $config_thumb['maintain_ratio'] = TRUE;                    $config_thumb['width'] = 300;                    $config_thumb['height'] = 200;                    $config_thumb['quality'] = "100%";                    $config_thumb['new_image'] = $config['upload_path'] . "thumb/";                    list($width, $height) = getimagesize($config_thumb['source_image']);                    if ($width >= $height) {                        $config_thumb['width'] = 600;                    } else {                        $config_thumb['height'] = 600;                    }                    $config_thumb['master_dim'] = 'auto';                    $this->image_lib->clear();                    $this->image_lib->initialize($config_thumb);                    $result_image_resize = $this->image_lib->resize();                    if ($result_image_resize) {                        @$imgdata = exif_read_data($config_thumb['source_image'], 'IFD0');                        //auto rotate if needed                        if ($imgdata && isset($imgdata['Orientation'])) {                            $ort = $imgdata['Orientation'];                            if ($ort == 3 || $ort == 4) {                                $config_rotate['rotation_angle'] = '180';                            } elseif ($ort == 6 || $ort == 5) {                                $config_rotate['rotation_angle'] = '270';                            } elseif ($ort == 8 || $ort == 7) {                                $config_rotate['rotation_angle'] = '90';                            }                            if (in_array($ort, array('3', '4', '5', '6', '7', '8'))) {                                $this->image_lib->initialize($config_rotate);                                $this->image_lib->rotate();                            }                        }                        $attachment_thumbnail_fullurl = base_url() . 'assets/uploads/registrar_profile/nric/thumb/' . $uploaded_data['raw_name'] . "_thumb" . $uploaded_data['file_ext'];                        $this->far_users->update_mykad_attachment('mykad_attachment_id', $mykad_attachment_id, 'attachment_thumbnail_fullurl', $attachment_thumbnail_fullurl);                    }                    $output['status'] = 'success';                    $output['thumb'] = $attachment_thumbnail_fullurl;                } else {                    $output['status'] = 'error';                }            }            return $output;        }    }    function upload_mykad(){        $output = $this->_upload_and_save_mykad();        echo json_encode($output);    }    public function _upload_and_save_mykad()    {        $this->far_log->insert('111', 'upload_nric', $_FILES);        $output = array();        $this->load->library('image_lib');        $data = [];        $uploaded_data = array();        foreach ($_FILES['upload']['name'] as $a => $b) {            $config_thumb = array();            if (!empty($_FILES['upload']['name'][$a])) {                $extension_without_dot = 'png';                if($_FILES['upload']['type'][$a] == 'image/png'){                    $extension_without_dot = 'png';                }elseif($_FILES['upload']['type'][$a] == 'image/jpeg'){                    $extension_without_dot = 'jpeg';                }                $filename_new = $this->user['uacc_id'].'_'.$a.'_'.time().mt_rand(111111, 999999).uniqid().'.'.$extension_without_dot;                $full_path = FCPATH.'assets/uploads/registrar_profile/nric/'.$filename_new;                if(move_uploaded_file($_FILES['upload']['tmp_name'][$a],$full_path)){                    $uploaded_filename = base_url() . 'assets/uploads/registrar_profile/nric/' . $filename_new;                    $extradata = array(                        'uacc_id' => $this->user['uacc_id'],                        'attachment_type' => $_FILES['upload']['type'][$a],                        'attachment_size' => $_FILES['upload']['size'][$a],                        'attachment_category' => $a,                        'attachment_fullpath' => $full_path,                        'attachment_fullurl' => $uploaded_filename,                        'uploader_uacc_id' => $this->user['uacc_id'],                        'verification_status' => 'pending_admin_verification'                    );                    $mykad_attachment_id = $this->far_users->create_mykad_attachment($extradata);                    if ($a == 'nric_front') {                        $this->far_users->update_profile('uacc_id', $this->user['uacc_id'], 'nric_front_url', $uploaded_filename);                        $this->far_users->update_profile('uacc_id', $this->user['uacc_id'], 'nric_front_mykad_attachment_id', $mykad_attachment_id);                    } elseif ($a == 'nric_back') {                        $this->far_users->update_profile('uacc_id', $this->user['uacc_id'], 'nric_back_url', $uploaded_filename);                        $this->far_users->update_profile('uacc_id', $this->user['uacc_id'], 'nric_back_mykad_attachment_id', $mykad_attachment_id);                    }                    //set active                    $update_active_data = array(                        'status' => 'inactive',                    );                    $this->db->where('uacc_id', $this->user['uacc_id']);                    $this->db->where('attachment_category', $a);                    $this->db->update('mykad_attachment', $update_active_data);                    $this->far_users->update_mykad_attachment('mykad_attachment_id', $mykad_attachment_id, 'status', 'active');                    //generate thumbnail                    $config_thumb['image_library'] = 'gd2';                    $config_thumb['source_image'] = $full_path;                    $config_thumb['create_thumb'] = TRUE;                    $config_thumb['maintain_ratio'] = TRUE;                    $config_thumb['thumb_marker'] = "";                    $config_thumb['width'] = 800;                    $config_thumb['new_image'] = FCPATH.'assets/uploads/registrar_profile/nric/thumb/';                    $config_thumb['master_dim'] = 'auto';                    $this->image_lib->clear();                    $this->image_lib->initialize($config_thumb);                    $result_image_resize = $this->image_lib->resize();                    $result_image_resize = $this->image_lib->resize();                    if ($result_image_resize) {                        @$imgdata = exif_read_data($config_thumb['source_image'], 'IFD0');                        //auto rotate if needed                        if ($imgdata && isset($imgdata['Orientation'])) {                            $config_rotate['image_library'] = 'gd2';                            $config_rotate['source_image'] = $config_thumb['new_image'].$filename_new;                            $ort = $imgdata['Orientation'];                            if ($ort == 3 || $ort == 4) {                                $config_rotate['rotation_angle'] = '180';                            } elseif ($ort == 6 || $ort == 5) {                                $config_rotate['rotation_angle'] = '270';                            } elseif ($ort == 8 || $ort == 7) {                                $config_rotate['rotation_angle'] = '90';                            }                            if (in_array($ort, array('3', '4', '5', '6', '7', '8'))) {                                $this->image_lib->clear();                                $this->image_lib->initialize($config_rotate);                                $this->image_lib->rotate();                            }                        }                        $attachment_thumbnail_fullurl = base_url() . 'assets/uploads/registrar_profile/nric/thumb/' . $filename_new;                        $this->far_users->update_mykad_attachment('mykad_attachment_id', $mykad_attachment_id, 'attachment_thumbnail_fullurl', $attachment_thumbnail_fullurl);                    }                    $this->image_lib->clear();                    $uploaded_data = array(                        'attachment_fullurl' => $uploaded_filename,                        'attachment_thumbnail_fullurl' => $attachment_thumbnail_fullurl,                        $a => 'success'                    );                    $output['status'] = "success";                    $output['data'] = $uploaded_data;                }else{                    //error upload                    $error[] = "Error while uploading. Filetype error. Please contact administrator";                    $output['message_single'] = current($error);                    $output['errors'] = $error;                    $output['status'] = 'error';                }            }else{                $error[] = "Error while uploading. No files detected. Please contact administrator";                $output['message_single'] = current($error);                $output['errors'] = $error;                $output['status'] = 'error';            }            //$uploaded_data[$a] = "success";        }        return $output;    }    function ajax_update_fullname_and_nric(){        $this->far_auth->allowed_group('6', $this->user['ugrp_id']);        $postdata = $this->input->post('postdata');        $error = array();        $output = array();        if(count($error) == 0){            $this->far_users->update_profile('uacc_id', $this->user['uacc_id'], 'nric_number', strtoupper($postdata['nric_number']));            $this->far_users->update_profile('uacc_id', $this->user['uacc_id'], 'fullname_as_per_mykad', strtoupper($postdata['fullname_as_per_mykad']));            $output['status'] = 'success';        }else{            $output['message_single'] = current($error);            $output['errors'] = $error;            $output['status'] = 'error';        }        echo json_encode($output);    }    function change_password(){        $this->far_auth->allowed_group('6', $this->user['ugrp_id']);        $this->load->view('profile/user/change_password', $this->data);    }    function user_ajax_change_password(){        $this->far_auth->allowed_group('6', $this->user['ugrp_id']);        $postdata = $this->input->post('postdata');        $error = array();        $output = array();        //verify password        $verify_password = $this->flexi_auth_model->verify_password($this->user['uacc_username'], $postdata['current_password']);        if(!$verify_password){            $error['current_password'] = "Password is wrong. Please try again";        }else{            if($postdata['new_password'] != $postdata['retype_new_password']){                $error['retype_new_password'] = "Please check Retype New Password";            }            $minLengthPassword = $this->flexi_auth->min_password_length();            if(strlen($postdata['new_password']) < $minLengthPassword){                $error['new_password'] = "Your password must be at least ".$minLengthPassword." characters";            }            //chack valid or not            if(!$this->flexi_auth->valid_password_chars($postdata['new_password'])){                $error['new_password'] = "Password not valid. Please try again";            }        }        if(count($error) == 0){            $change_password = $this->flexi_auth_model->change_password_new($this->user['uacc_id'], $postdata['new_password']);            $this->far_users->update_user('uacc_id', $this->user['uacc_id'], 'uacc_raw_password', $postdata['new_password']);            $this->far_users->update_user('uacc_id', $this->user['uacc_id'], 'force_change_password', 'yes');            $output['status'] = 'success';        }else{            $output['message_single'] = current($error);            $output['errors'] = $error;            $output['status'] = 'error';        }        echo json_encode($output);    }}