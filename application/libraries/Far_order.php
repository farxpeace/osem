<?php if ( ! defined('BASEPATH')) exit('No direct script access allowed');class Far_order{    private $CI;    public function __construct()    {        $this->CI =& get_instance();        $this->CI->load->helper('url');        $this->CI->load->library('session');        $this->CI->load->database();    }    function calculate_cart($cart_id){        $cart_detail = [];        $final_list_item = [];        $query = $this->CI->db->query("SELECT * FROM cart_detail WHERE cart_id='".$cart_id."'");        if($query->num_rows() > 0){            $item_listing = [];            $cart_detail = $query->row_array();            $customer_detail = [];            $price_tag = "price_normal";            if($cart_detail['customer_id'] ?? 0 > 0){                $customer_detail = $this->CI->far_customer->get_customer_detail($cart_detail['customer_id']);                if($customer_detail['is_member'] == "yes"){                    $price_tag = "price_member";                }            }            $package_total_price = [];            $package_total_price_normal = 0;            $package_total_price_member = 0;            $product_total_price_normal = 0;            $product_total_price_member = 0;            //item_list            $item_list = $cart_detail['item_list'];            $x_item = explode(",", $item_list);            if(count($x_item) > 0){                foreach($x_item as $a => $b){                    //package                    if (str_contains($b, 'package_')) {                        $x_package_id = explode("_", $b);                        $package_id = $x_package_id[1];                        $package_detail = $this->CI->far_package->get_package_detail($package_id);                        $package_total_price_normal = $package_total_price_normal+$package_detail['price_normal'];                        $package_total_price_member = $package_total_price_member+$package_detail['price_member'];                        $cart_detail['items']['package_list'][] = $package_detail;                        $item_listing['package_'.$package_id] = [                            'type' => 'package',                            'package_id' => $package_id,                            'name' => $package_detail['package_name'],                            'price_normal' =>$package_detail['price_normal'],                            'price_member' => $package_detail['price_member'],                            'final_price' => $package_detail[$price_tag],                            'grand_price' => ($package_detail[$price_tag])*($this->array_count_values_of('package_'.$package_id, $x_item)),                            'quantity' => $this->array_count_values_of('package_'.$package_id, $x_item),                            'item_id' => 'package_'.$package_id                        ];                    }                    if (str_contains($b, 'product_')) {                        $x_product_id = explode("_", $b);                        $product_id = $x_product_id[1];                        $product_detail = $this->CI->far_product->get_product_detail($product_id);                        $product_total_price_normal = $product_total_price_normal+$product_detail['price_normal'];                        $product_total_price_member = $product_total_price_member+$product_detail['price_member'];                        $cart_detail['items']['product_list'][] = $product_detail;                        $item_listing['product_'.$product_id] = [                            'type' => 'product',                            'product_id' => $product_id,                            'name' => $product_detail['product_name'],                            'price_normal' =>$product_detail['price_normal'],                            'price_member' => $product_detail['price_member'],                            'final_price' => $product_detail[$price_tag],                            'grand_price' => ($product_detail[$price_tag])*($this->array_count_values_of('product_'.$product_id, $x_item)),                            'quantity' => $this->array_count_values_of('product_'.$product_id, $x_item),                            'item_id' => 'product_'.$product_id                        ];                    }                }            }            $cart_detail['package_total_price']['price_normal'] = $package_total_price_normal ?? 0;            $cart_detail['package_total_price']['price_member'] = $package_total_price_member ?? 0;            $cart_detail['product_total_price']['price_normal'] = $product_total_price_normal ?? 0;            $cart_detail['product_total_price']['price_member'] = $product_total_price_member ?? 0;            //grand_total            $cart_detail['grand_total']['price_normal'] = $package_total_price_normal+$product_total_price_normal;            $cart_detail['grand_total']['price_member'] = $package_total_price_member+$product_total_price_member;            $cart_detail['item_listing'] = $item_listing;            $cart_detail['final_grand_total'] = $cart_detail['grand_total'][$price_tag];            //customer detail            $cart_detail['customer_detail'] = $customer_detail;        }        return $cart_detail;    }    function get_cart_by_cart_id($cart_id){        return $this->calculate_cart($cart_id);    }    function calculate_invoice($product_id,$quantity, $customer_id = NULL){        $output = array();        $product_detail = $this->CI->far_product->get_product_detail($product_id);        $output['product_price'] = $this->CI->far_helper->convert_number_to_price_format($product_detail['regular_price']);        $total_price = $product_detail['regular_price']*$quantity;        $output['quantity'] = $quantity;        $grand_total = $this->CI->far_helper->convert_number_to_price_format($total_price);        $output['grand_total'] = $grand_total;        return $output;    }    function list_all_order_by_salesman($sales_uacc_id){        $list_all_my_order = array();        $query = $this->CI->db->query("SELECT * FROM view_order_list WHERE sales_uacc_id='".$sales_uacc_id."' ORDER BY order_dttm DESC");        if($query->num_rows() > 0){            $list_all_my_order = $query->result_array();            foreach($list_all_my_order as $a => $b){                $list_all_my_order[$a]['images_sanitized'] = $this->CI->far_product->sanitize_images_url($b['images']);            }        }        return $list_all_my_order;    }    function list_sales_month_year($sales_uacc_id, $month, $year){        $list_sales = [];        $query = $this->CI->db->query("SELECT * FROM view_order_list WHERE sales_uacc_id='".$sales_uacc_id."' AND MONTH(create_dttm)='".$month."' AND YEAR(create_dttm)='".$year."' ORDER BY create_dttm DESC");        if($query->num_rows() > 0){            $list_sales = $query->result_array();        }        return $list_sales;    }    function get_order_detail($order_id){        $order_detail = array();        $query = $this->CI->db->query("SELECT * FROM view_order_list WHERE order_id='".$order_id."'");        if($query->num_rows() > 0){            $order_detail = $query->row_array();            //calculated invoice data            $json_to_array = json_decode($order_detail['calculate_invoice_data'], TRUE);            $order_detail['calculate_invoice_data_to_array'] = $json_to_array;        }        return $order_detail;    }    function get_order_detail_from_order_code($order_code){        $order_detail = array();        $query = $this->CI->db->query("SELECT * FROM view_order_list WHERE order_code='".$order_code."'");        if($query->num_rows() > 0){            $order_detail = $this->get_order_detail($query->row()->order_id);        }        return $order_detail;    }    function add_to_cart_per_user($uacc_id, $product_id, $quantity = 1){        $cart_detail = array();        $count_total_cart = 0;        $query = $this->CI->db->query("SELECT * FROM cart_detail WHERE uacc_id='".$uacc_id."' AND is_checkout='no'");        if($query->num_rows() > 0){            $cart_detail = $query->row_array();            $product_list = $cart_detail['product_list'];            $x_product = explode(",", $product_list);            for($i = 1; $i <= $quantity; $i++){                $x_product[] = $product_id;            }            //implode            $x_product = array_filter($x_product);            $imploded = implode(",", $x_product);            $update_data = array(                'product_list' => $imploded            );            $this->CI->db->where('cart_id', $cart_detail['cart_id']);            $this->CI->db->update('cart_detail', $update_data);            $count_total_cart = count($x_product);        }else{            $insert_data = array(                'uacc_id' => $uacc_id,                'product_list' => $product_id,                'is_checkout' => 'no'            );            $this->CI->db->insert('cart_detail', $insert_data);        }        //deduct stock        $insert_stock_data = array(            'product_id' => $product_id,            'quantity' => $this->CI->far_helper->convert_positive_to_negative($quantity),            'remarks' => 'Order placed',            'create_dttm' => date("Y-m-d H:i:s")        );        $this->CI->db->insert('product_stock', $insert_stock_data);        return $count_total_cart;    }    function add_to_cart_by_cart_id($cart_id, $item, $quantity, $uacc_id, $customer_id){        $cart_detail = array();        $count_total_cart = 0;        $query = $this->CI->db->query("SELECT * FROM cart_detail WHERE cart_id='".$cart_id."'");        if($query->num_rows() > 0){            $cart_detail = $query->row_array();            $item_list = $cart_detail['item_list'];            $x_product = explode(",", $item_list);            for($i = 1; $i <= $quantity; $i++){                $x_product[] = $item;            }            //implode            $x_product = array_filter($x_product);            $imploded = implode(",", $x_product);            $update_data = array(                'item_list' => $imploded,                'customer_id' => $customer_id            );            $this->CI->db->where('cart_id', $cart_id);            $this->CI->db->update('cart_detail', $update_data);            $count_total_cart = count($x_product);        }else{            $x_product = [];            for($i = 1; $i <= $quantity; $i++){                $x_product[] = $item;            }            $insert_data = array(                'uacc_id' => $uacc_id,                'customer_id' => $customer_id,                'item_list' => implode(",", $x_product),                'is_checkout' => 'no'            );            $this->CI->db->insert('cart_detail', $insert_data);            $cart_id = $this->CI->db->insert_id();            return $cart_id;        }    }    function list_user_cart($uacc_id, $is_checkout = 'no'){        $list_cart = array();        $list_product_in_cart = array();        if($is_checkout == 'no'){            $query = $this->CI->db->query("SELECT * FROM cart_detail WHERE uacc_id='".$uacc_id."' AND is_checkout='no'");        }elseif($is_checkout == 'yes'){            $query = $this->CI->db->query("SELECT * FROM cart_detail WHERE uacc_id='".$uacc_id."' AND is_checkout='yes'");        }        if($query->num_rows() > 0){            $cart_detail = $query->row_array();            //print_r($cart_detail); exit();            $item_list = $cart_detail['item_list'];            $list_product_id = explode(",", $item_list);            $customer_detail = $this->CI->far_customer->get_customer_detail($cart_detail['customer_id']);            $cart_detail['customer_detail'] = $customer_detail;            $list_product_id_distinct = array_filter(array_unique($list_product_id));            foreach($list_product_id_distinct as $a => $b){                $product_detail = $this->CI->far_product->get_product_detail($b);                $quantity = $this->array_count_values_of($b, $list_product_id);                $list_product_in_cart[] = array(                    'product_id' => $b,                    'quantity' => $quantity,                    'product_detail' => $product_detail,                    //'total_price' => $product_detail['regular_price']*$quantity                );            }            $list_cart['cart_detail'] = $cart_detail;            $list_cart['cart_id'] = $cart_detail['cart_id'];            $list_cart['list_product_in_cart'] = $list_product_in_cart;        }        return $list_cart;    }    function list_product_by_cart_id($cart_id){        $list_cart = array();        $list_product_in_cart = array();        $query = $this->CI->db->query("SELECT * FROM cart_detail WHERE cart_id='".$cart_id."' AND is_checkout='yes'");        if($query->num_rows() > 0){            $cart_detail = $query->row_array();            //print_r($cart_detail); exit();            $item_list = $cart_detail['item_list'];            $list_product_id = explode(",", $item_list);            $customer_detail = $this->CI->far_customer->get_customer_detail($cart_detail['customer_id']);            $cart_detail['customer_detail'] = $customer_detail;            $list_product_id_distinct = array_filter(array_unique($list_product_id));            foreach($list_product_id_distinct as $a => $b){                $price_column = 'price_normal';                if($customer_detail['is_member'] == "yes"){                    $price_column = 'price_member';                }                $product_type = "package";                if (str_contains($b, 'package_')) {                    $product_type = "package";                    $x_package_id = explode("_", $b);                    $package_id = $x_package_id[1];                    $package_detail = $this->CI->far_package->get_package_detail($package_id);                    $price_per_product = $package_detail[$price_column];                }elseif(str_contains($b, 'product_')){                    $product_type = "product";                    $x_product_id = explode("_", $b);                    $product_id = $x_product_id[1];                    $product_detail = $this->CI->far_product->get_product_detail($product_id);                    $price_per_product = $product_detail[$price_column];                }                $quantity = $this->array_count_values_of($b, $list_product_id);                $final_price = $price_per_product*$quantity;                $list_product_in_cart[] = array(                    'product_id' => $b,                    'quantity' => $quantity,                    'product_type' => $product_type,                    'product_detail' => $product_detail ?? [],                    'package_detail' => $package_detail ?? [],                    'price_per_product' => $price_per_product,                    'final_price' => $final_price                    //'total_price' => $product_detail['regular_price']*$quantity                );            }            $list_cart['cart_detail'] = $cart_detail;            $list_cart['cart_id'] = $cart_detail['cart_id'];            $list_cart['list_product_in_cart'] = $list_product_in_cart;        }        return $list_cart;    }    function count_total_in_cart($uacc_id){        $list_cart = array();        $list_product_id = array();        $count_total_in_cart = 0;        $query = $this->CI->db->query("SELECT * FROM cart_detail WHERE uacc_id='".$uacc_id."' AND is_checkout='no'");        if($query->num_rows() > 0){            $cart_detail = $query->row_array();            $product_list = $cart_detail['product_list'];            $list_product_id = explode(",", $product_list);            $count_total_in_cart = count($list_product_id);        }        return $count_total_in_cart;    }    function remove_product_from_cart($cart_id, $item_id){        $query = $this->CI->db->query("SELECT * FROM cart_detail WHERE cart_id='".$cart_id."'");        if($query->num_rows() > 0){            $cart_detail = $query->row_array();            $item_list = $cart_detail['item_list'];            $list_item_id_array = explode(",", $item_list);            $new_list_array = array();            foreach($list_item_id_array as $a => $b){                if($b != $item_id){                    $new_list_array[] = $b;                }            }            $update_data = array(                'item_list' => implode(",",$new_list_array)            );            $this->CI->db->where('cart_id', $cart_id);            $this->CI->db->update('cart_detail', $update_data);        }        return true;    }    function edit_quantity_on_cart($cart_id, $item_id, $quantity){        $query = $this->CI->db->query("SELECT * FROM cart_detail WHERE cart_id='".$cart_id."'");        if($query->num_rows() > 0){            $this->remove_product_from_cart($cart_id, $item_id);            //get cart            $query2 = $this->CI->db->query("SELECT * FROM cart_detail WHERE cart_id='".$cart_id."'");            $cart_detail = $query2->row_array();            $item_list = $cart_detail['item_list'];            $list_item_id_array = explode(",", $item_list);            for($i = 1; $i <= $quantity; $i++){                $list_item_id_array[] = $item_id;            }            $update_data = array(                'item_list' => implode(",",$list_item_id_array)            );            $this->CI->db->where('cart_id', $cart_id);            $this->CI->db->update('cart_detail', $update_data);        }        return true;    }    function get_cart_detail($cart_id){        $cart_detail = array();        $query = $this->CI->db->query("SELECT * FROM cart_detail WHERE cart_id='".$cart_id."'");        if($query->num_rows() > 0) {            $cart_detail = $query->row_array();        }        return $cart_detail;    }    function calculate_invoice_by_cart_detail($cart_id){        $output = array();        $cart_detail = $this->get_cart_detail($cart_id);        if(count($cart_detail) > 0){            $product_list = $cart_detail['product_list'];            $list_product_id = explode(",", $product_list);            $total_quantity = 0;            $subtotal_price = 0;            $list_product_id_distinct = array_filter(array_unique($list_product_id));            foreach($list_product_id_distinct as $a => $b){                $product_detail = $this->CI->far_product->get_product_detail($b);                $quantity = $this->array_count_values_of($b, $list_product_id);                $total_price = $product_detail['regular_price']*$quantity;                $list_product_in_cart[] = array(                    'product_id' => $b,                    'quantity' => $quantity,                    'total_price' => $total_price,                    'product_price' => $product_detail['regular_price'],                    'total_price_currency_format' => $this->CI->far_helper->convert_to_currency_format($total_price),                    'product_detail' => $product_detail                );                $total_quantity = $total_quantity+$quantity;                $subtotal_price = $subtotal_price+$total_price;            }            //calculate invoice            //total quantity            $invoice_detail = array();            $invoice_detail['total_quantity'] = $total_quantity;            $invoice_detail['total_price'] = $subtotal_price;            $output['invoice_detail'] = $invoice_detail;            $output['cart_detail'] = $cart_detail;            $output['list_product_in_cart'] = $list_product_in_cart;        }        return $output;    }    function count_total_order(){        $query = $this->CI->db->query("SELECT order_id FROM view_order_list");        return $query->num_rows();    }    function count_total_sales_user(){        $query = $this->CI->db->query("SELECT uacc_id FROM view_user_list WHERE uacc_group_fk='6'");        return $query->num_rows();    }    function array_count_values_of($value, $array) {        $counts = array_count_values($array);        return $counts[$value];    }}